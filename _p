#!/usr/bin/env bash

# https://stackoverflow.com/questions/4774054/reliable-way-for-a-bash-script-to-get-the-full-path-to-itself
script_dir="$(
  cd -- "$(dirname "$0")" >/dev/null 2>&1
  pwd -P
)"

# include conf
source $script_dir/_p.config

### FUNCTIONS ###
## utils

array_to_params() {
  local param_name=$1
  shift
  local array=$@

  local string_params
  set -f
  for item in $array; do
    string_params+=$param_name
    string_params+="="
    string_params+="$item"
    string_params+=" "
  done
  set +f

  echo $string_params
}

_p_print() {
  echo ">" $1
}

## commands
help() {
  cat <<EOF
Usage: _p [OPTIONS] [PROJECT_NAME] COMMAND

Options:
     -h|--help                  Displays this help
     -v|--verbose               Displays verbose output
     -i|--interactive           Run in interactive mode
     -w|--working-dir DIR       Define project directory
     -p|--project-name NAME     Define project name

Commands:
    --init                      Create ._p directory and install default _p templates
    -ls| --list                 List scoped projects
    -s | --search PATTERN       Search for PATTERN into files
    -f | --file FILENAME        Displays the content of FILENAME from PROJECT_NAME
      -h | --headings PATTERN   Extract ##PATTERN block from FILENAME
      --clear                   Erase data from FILENAME except headings
    @PATTERN                    Search for string "@PATTERN" into files
    _FILENAME                   Displays the content of FILENAME.md file
EOF
}

init() {
  if [[ -d "$default_p_dir" ]]; then
    _p_print "cannot create directory $default_p_dir it already exists."
  else
    _p_print "Do you want to download _p templates in $(pwd)/${default_p_dir} [Y/n]?"

    local install_p_templates
    read -r install_p_templates
    if [[ $install_p_templates =~ [Nn] ]]; then
      _p_print "Installation cancelled"
    else
      mkdir $default_p_dir
      _p_print "$default_p_dir directory created"

      git clone -q --depth=1 --branch=master "https://github.com/0kyn/_p-templates" $default_p_dir
      _p_print "_p templates repository cloned into $default_p_dir"

      _p_print "Keep git related folder and files such as: .git/, .gitignore, LICENCE, README.md [y/N]?"

      local keep_git
      read -r keep_git
      if [[ ! $keep_git =~ [Yy] ]]; then
        rm -rf $default_p_dir/.git
        rm $default_p_dir/.gitignore
        rm $default_p_dir/LICENCE
        rm $default_p_dir/README.md
        _p_print "_p templates repository cleaned"
      fi

      _p_print "_p templates installed"
    fi
  fi
}

clear_template() {
  local file_path=$1

  _p_print "Do you want to clear $file_path template? It will erase template data except headings [y|N]?"
  local clear_template_choice
  read -r clear_template_choice
  if [[ $clear_template_choice =~ [Yy] ]]; then
    sed -i 's/^[^#].*//gm; /^$/d; s/$/\n/gm' $file_path
    _p_print "Template cleared"
  fi

  exit 0
}

list_projects() {
  echo "Projects in $projects_dir:"
  printf "\n"

  params=(-mindepth "1" -maxdepth "1" \()
  set -f
  for dir in ${projects_dir_to_ignore[@]}; do
    params+=(-name)
    params+=("$dir")
    params+=(-o)
  done
  unset 'params[${#params[@]}-1]' # remove last index "-o"
  params+=(\) -prune -o -type "d" -print)

  find "$projects_dir" "${params[@]}" | xargs -I {} basename {}

  set +f
  exit
}

print_header() {
  file_path=$1
  project_name=$(basename $(dirname $(dirname $file_path)))
  file_name=$(basename $file_path)

  echo "############## $project_name | $file_name ##############"
  _p_print "File path: $file_path"
  printf "\n"
}

show_file() {
  file_path=$1
  print_header $file_path
  cat $file_path
  printf "\n"
}

extract_headings() {
  local file_path=$1
  local heading=$2

  print_header $file_path
  _p_print "Heading(s) match: \"$heading.*\""
  printf "\n"

  grep -Pzo "(#.*$heading.*([\n\r]|.)*?(?=#+?\s))" "$file_path"
}

search() {
  local pattern="$1"

  if [ -z ${project_name+x} ]; then
    project_path=$projects_dir/
  else
    project_path=$projects_dir/$project_name/
  fi

  local dirs_to_ignore=("${project_dir_to_ignore[@]}" "${projects_dir_to_ignore[@]}")
  local dirs_to_ignore_params=$(array_to_params --exclude-dir "${dirs_to_ignore[@]}")

  local files_to_ignore_params=$(array_to_params --exclude "${project_files_to_ignore[@]}")

  grep -R --color=always $dirs_to_ignore_params $files_to_ignore_params $pattern $project_path | more
}

## params parsing/settings
parse_params() {
  local param
  while [[ $# -gt 0 ]]; do
    param="$1"
    case $param in
    # options
    -h | --help)
      help
      shift
      exit 0
      ;;
    -v | --verbose)
      verbose=true
      shift
      ;;
    -i | --interactive)
      interactive_mode=true
      shift
      ;;
    -w | --working-dir)
      projects_dir=$(realpath $2)
      shift 2
      ;;
    -p | --project-name)
      project_name=$2
      shift 2
      ;;

    # commands
    --init)
      init
      exit 0
      ;;

    -ls | --list)
      list_projects $projects_dir
      exit 0
      ;;

    -s | --search | "@"*)
      local pattern=$2
      if [[ $param =~ ^@ ]]; then
        pattern=$param
      fi
      search $pattern
      exit 0
      ;;

    -f | --file | _*)
      local file_name
      if [[ $param =~ ^_ ]]; then
        file_name=${param}.md
        shift
      else
        file_name=$2.md
        shift 2
      fi

      file_path="${projects_dir}"
      [[ ! -z $project_name ]] && file_path+="/${project_name}"
      file_path+="/${default_p_dir}/${file_name}"

      if [[ "$@" =~ -h|--headings ]]; then
        local heading=$2
        extract_headings $file_path $heading
        exit 0
      fi

      if [[ "$@" =~ --clear ]]; then
        clear_template $file_path
        exit 0
      fi

      show_file "$file_path"

      exit 0
      ;;

    *)
      project_name=$1
      shift
      ;;
    esac
  done
}

run_interactive_mode() {
  echo "projects directory: $projects_dir"
  while :; do
    mainMenu=false
    printf "\n"
    echo "Enter your project name: "
    read -r project_name

    project_p_dir="$projects_dir/$project_name/$default_p_dir"
    if [ -d $project_p_dir ]; then
      echo "current directory: $project_p_dir"

      printf "\n"

      while [ "$mainMenu" != true ]; do
        echo "File to show: "

        options=()
        for filename in "$project_p_dir/"*; do
          file_basename=($(basename $filename))

          if [[ $file_basename =~ ^_.*\.md$ ]]; then
            options+=($file_basename)
          fi
        done
        options+=("Choose another project")

        select file in "${options[@]}"; do
          case $file in
          "Choose another project")
            mainMenu=true
            ;;
          *)
            clear
            show_file $project_p_dir/$file
            ;;
          esac
          break
        done
      done
    else
      echo "$project_p_dir doesn't exist"
      # @todo init _p project y/n
    fi
  done
}

main() {
  # Enable xtrace if the DEBUG environment variable is set
  if [[ ${DEBUG-} =~ ^1|yes|true$ ]]; then
    set -o xtrace # Trace the execution of the script (debug)
  fi

  # If no arguments supplied
  if [ $# -eq 0 ]; then
    help
    exit 0
  fi

  if [[ -z $projects_dir ]]; then
    projects_dir=$(pwd)
  fi

  parse_params "$@"

  if [[ $interactive_mode == true ]]; then
    run_interactive_mode
  fi
}

### MAIN ###
if ! (return 0 2>/dev/null); then
  main "$@"
fi
