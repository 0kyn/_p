#!/bin/bash

# https://stackoverflow.com/questions/4774054/reliable-way-for-a-bash-script-to-get-the-full-path-to-itself
script_dir="$(
  cd -- "$(dirname "$0")" >/dev/null 2>&1
  pwd -P
)"

# include conf
source $script_dir/_p.config

### FUNCTIONS ###
function help() {
  cat <<EOF
Usage: _p [OPTIONS] [PROJECT_NAME] COMMAND

Options:
     -h|--help                  Displays this help
     -v|--verbose               Displays verbose output
     -i|--interactive           Run in interactive mode
     -l|--local                 Run in current project scope
     -g|--global                Run in all projects scope
     -w|--working-dir=DIR       Define project directory
     -p|--project-name=NAME     Define project name

    #@todo
    #--edit                     Edit mode

Commands:
    -ls|--list                  List scoped projects
    -s | --search=PATTERN       Search for PATTERN into files
    -f | --file=FILENAME        Displays the content of FILENAME from PROJECT_NAME
    @PATTERN                    Search for string "@PATTERN" into files
    _FILENAME                   Displays the content of FILENAME.md file
EOF
}

function set_local_var() {
  projects_dir="$(dirname $(dirname ${script_dir}))"
  project_name="$(basename $(dirname ${script_dir}))"
}

function reset_local_var() {
  projects_dir=$default_projects_dir
  project_name=
}

function join_by {
  local d=${1-} f=${2-}
  if shift 2; then
    printf %s "$f" "${@/#/$d}"
  fi
}

function list_projects() {
  echo "Projects in $projects_dir:"
  printf "\n"
  params=("-mindepth 1 -maxdepth 1 -type d \(")
  for dir in $projects_dir_to_ignore; do
    params+=("-name")
    params+=($dir)
    params+=("-o")
  done
  unset 'params[${#params[@]}-1]' # remove last index "-o"
  params+=("\) -prune -o -print")

  local cmd_string="find $projects_dir ${params[@]} | xargs -I {} basename {}"
  eval $cmd_string
  exit
}

function show_file() {
  file_path=$1
  project_name=$(basename $(dirname $(dirname $file_path)))
  file_name=$(basename $file_path)

  echo "############## $project_name | $file_name ##############"
  echo $file_path
  printf "\n"
  cat $file_path
  printf "\n"
}

function search() {
  local pattern="$1"

  if [ -z ${project_name+x} ]; then
    project_path=$projects_dir/
  else
    project_path=$projects_dir/$project_name/
  fi

  # eval "find $project_path -type d $(for ed in $project_dir_to_ignore; do echo -n "-name \"$ed\" -prune -o "; done) -type f -exec grep --color=always -e @todo {} + | more"
  local cmd_string="grep -R --color=always --exclude-dir={$(join_by ',' $project_dir_to_ignore)} '$pattern' $project_path | more"
  eval $cmd_string
}

function search_md_file() {
  if [ $local == false ]; then
    file_name=${param}.md
    file_path=$projects_dir/$project_name/$default_p_dir/$file_name
  fi
}

function parse_params() {
  local param
  while [[ $# -gt 0 ]]; do
    param="$1"
    case $param in
    # options
    -h | --help)
      help
      shift
      exit 0
      ;;
    -v | --verbose)
      verbose=true
      shift
      ;;
    -i | --interactive)
      interactive_mode=true
      shift
      ;;
    -l | --local)
      local=true
      set_local_var
      shift
      ;;
    -g | --global)
      local=false
      reset_local_var
      shift
      ;;
    -w | --working-dir)
      projects_dir=$2
      shift 2
      ;;
    -p | --project-name)
      project_name=$2
      shift 2
      ;;

    # commands
    -ls | --list)
      list_projects $projects_dir
      exit 0
      ;;

    -s | --search | "@"*)
      local pattern=$2
      if [[ $param =~ ^@ ]]; then
        pattern=$param
      fi
      search $pattern
      exit 0
      ;;

    -f | --file | _*)
      local file_name=$2.md
      if [[ $param =~ ^_ ]]; then
        file_name=${param}.md
      fi

      file_path=$projects_dir/$project_name/$default_p_dir/$file_name

      show_file "$file_path"
      exit 0
      ;;

    *)
      project_name=$1
      shift
      ;;
    esac
  done
}

run_interactive_mode() {
  echo "projects directory: $projects_dir"
  while :; do
    mainMenu=false
    printf "\n"
    echo "Enter your project name: "
    read -r project_name

    project_p_dir="$projects_dir/$project_name/$default_p_dir"
    if [ -d $project_p_dir ]; then
      echo "current directory: $project_p_dir"

      printf "\n"

      while [ "$mainMenu" != true ]; do
        echo "File to show: "

        options=()
        for filename in "$project_p_dir/"*; do
          options+=($(basename $filename))
        done
        options+=("Choose another project")

        select file in "${options[@]}"; do
          case $file in
          "Choose another project")
            mainMenu=true
            ;;
          *)
            clear
            show_file $project_p_dir/$file
            ;;
          esac
          break
        done
      done
    else
      echo "$project_p_dir doesn't exist"
      # @todo init _p project y/n
    fi
  done
}

main() {
  # Enable xtrace if the DEBUG environment variable is set
  if [[ ${DEBUG-} =~ ^1|yes|true$ ]]; then
    set -o xtrace # Trace the execution of the script (debug)
  fi

  # If no arguments supplied
  if [ $# -eq 0 ]; then
    help
    exit 0
  fi

  if [[ $local == true ]]; then
    set_local_var
  fi

  parse_params "$@"

  if [[ $interactive_mode == true ]]; then
    run_interactive_mode
  fi
}

### MAIN ###
if ! (return 0 2>/dev/null); then
  main "$@"
fi
